/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vistas;

import Entidades.Tratamiento;
import com.sun.media.sound.ModelOscillator;
import conexion.TratamientoData;
import java.awt.Color;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author cyka
 */
public class tratamienTodosVista extends javax.swing.JInternalFrame {

    Color azulClaro = new Color(0, 173, 255);
    DefaultTableModel modelo = new DefaultTableModel() {
        @Override
        public boolean isCellEditable(int f, int c) {
            return (c != 0 && c!=3);
           
        }
    };
    
    TratamientoData td = new TratamientoData();

    /**
     * Creates new form tratamienTodosVista
     */
    public tratamienTodosVista() {
        initComponents();
        cargarCabecera();

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTTratamientos = new javax.swing.JTable();
        jbActivarDesactivar = new javax.swing.JButton();
        jbModificar = new javax.swing.JButton();
        jBCerrar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jRBTratActivos = new javax.swing.JRadioButton();
        jRBTratDesac = new javax.swing.JRadioButton();
        jRBTratTodos = new javax.swing.JRadioButton();

        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTTratamientos.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jTTratamientos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tipo", "Importe", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTTratamientos.setToolTipText("");
        jTTratamientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTTratamientosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTTratamientos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(52, 130, 650, 240));

        jbActivarDesactivar.setBackground(new java.awt.Color(51, 51, 255));
        jbActivarDesactivar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jbActivarDesactivar.setForeground(new java.awt.Color(255, 255, 255));
        jbActivarDesactivar.setText("Desactivar/Activar");
        jbActivarDesactivar.setBorder(new javax.swing.border.MatteBorder(null));
        jbActivarDesactivar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbActivarDesactivar.setOpaque(false);
        jbActivarDesactivar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActivarDesactivarActionPerformed(evt);
            }
        });
        jPanel1.add(jbActivarDesactivar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, 140, 30));

        jbModificar.setBackground(new java.awt.Color(51, 51, 255));
        jbModificar.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jbModificar.setForeground(new java.awt.Color(255, 255, 255));
        jbModificar.setText("Modificar");
        jbModificar.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        jbModificar.setBorderPainted(false);
        jbModificar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jbModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarActionPerformed(evt);
            }
        });
        jPanel1.add(jbModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 380, 140, 30));

        jBCerrar.setFont(new java.awt.Font("Roboto", 1, 13)); // NOI18N
        jBCerrar.setText("Cerrar");
        jBCerrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jBCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(jBCerrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 473, 80, 20));

        jLabel1.setFont(new java.awt.Font("Roboto", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TRATAMIENTOS");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 750, 40));

        jRBTratActivos.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jRBTratActivos.setForeground(new java.awt.Color(255, 255, 255));
        jRBTratActivos.setText("Ver Activos");
        jRBTratActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBTratActivosActionPerformed(evt);
            }
        });
        jPanel1.add(jRBTratActivos, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 130, -1));

        jRBTratDesac.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jRBTratDesac.setForeground(new java.awt.Color(255, 255, 255));
        jRBTratDesac.setText("Ver Desactivados");
        jRBTratDesac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBTratDesacActionPerformed(evt);
            }
        });
        jPanel1.add(jRBTratDesac, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 80, 130, -1));

        jRBTratTodos.setFont(new java.awt.Font("Roboto", 1, 12)); // NOI18N
        jRBTratTodos.setForeground(new java.awt.Color(255, 255, 255));
        jRBTratTodos.setText("Ver Todos");
        jRBTratTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBTratTodosActionPerformed(evt);
            }
        });
        jPanel1.add(jRBTratTodos, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 130, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, -1, 750, 520));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCerrarActionPerformed

        // TODO add your handling code here:
        dispose();
        jbModificar.setEnabled(false);
    }//GEN-LAST:event_jBCerrarActionPerformed

    private void jbActivarDesactivarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActivarDesactivarActionPerformed
        // TODO add your handling code here:
        try {
            int indexFila = jTTratamientos.getSelectedRow();
            int idTr = (int) jTTratamientos.getValueAt(indexFila, 0);

            if (jTTratamientos.getValueAt(indexFila, 3).equals("Desactivo")) {
                td.modificarTratamientoEstadoActivado(idTr);
                jRBTratActivosActionPerformed(evt);
            } else {
                td.modificarTratamientoEstadoDesactivado(idTr);
                jRBTratDesacActionPerformed(evt);
            }
            
            //borrarFilas();
            
            if(jRBTratActivos.isSelected()) {
                jRBTratActivosActionPerformed(evt);
            } else if (jRBTratDesac.isSelected()) {
                jRBTratDesacActionPerformed(evt);
            } else {
                jRBTratTodosActionPerformed(evt);
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Datos sin seleccionar");
        }


    }//GEN-LAST:event_jbActivarDesactivarActionPerformed

    private void jRBTratActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBTratActivosActionPerformed
        // TODO add your handling code here:
        jRBTratDesac.setSelected(false);
        jRBTratTodos.setSelected(false);
        borrarFilas();
        if (jRBTratActivos.isSelected()) {
            List<Tratamiento> tratamientos = td.listarTratamiento();

            for (Tratamiento tratamiento : tratamientos) {
                modelo.addRow(new Object[]{tratamiento.getIdTratamiento(), tratamiento.getTipo(), tratamiento.getImporte(), tratamiento.isEstado() ? "Activo" : "Desactivo"});
            }
        }
    }//GEN-LAST:event_jRBTratActivosActionPerformed

    private void jRBTratDesacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBTratDesacActionPerformed
        // TODO add your handling code here:
        jRBTratActivos.setSelected(false);
        jRBTratTodos.setSelected(false);
        borrarFilas();
        if (jRBTratDesac.isSelected()) {
            List<Tratamiento> tratamientos = td.listarTratamientoInactivo();
            for (Tratamiento tratamiento : tratamientos) {
                modelo.addRow(new Object[]{tratamiento.getIdTratamiento(), tratamiento.getTipo(), tratamiento.getImporte(), tratamiento.isEstado() ? "Activo" : "Desactivo"});
            }
        }
    }//GEN-LAST:event_jRBTratDesacActionPerformed

    private void jRBTratTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBTratTodosActionPerformed
        // TODO add your handling code here:
        jRBTratActivos.setSelected(false);
        jRBTratDesac.setSelected(false);
        borrarFilas();
        if (jRBTratTodos.isSelected()) {
            List<Tratamiento> tratamientos = td.listarTodosTratamiento();

            for (Tratamiento tratamiento : tratamientos) {
                modelo.addRow(new Object[]{tratamiento.getIdTratamiento(), tratamiento.getTipo(), tratamiento.getImporte(), tratamiento.isEstado() ? "Activo" : "Desactivo"});
            }
        }
    }//GEN-LAST:event_jRBTratTodosActionPerformed

    private void jbModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarActionPerformed
        // TODO add your handling code here:

        try {
            int indexFila = jTTratamientos.getSelectedRow();
            int idTr = (int) jTTratamientos.getValueAt(indexFila, 0);
            String tipoMod = (String) jTTratamientos.getValueAt(indexFila, 1);
            int importeMod = Integer.parseInt(jTTratamientos.getValueAt(indexFila, 2).toString());

            if (tipoMod.equals("")) {
                JOptionPane.showMessageDialog(null, "Campos vacios o incorrectos");
            } else {
                td.modificarTratamientoXId(idTr, tipoMod, importeMod);
            }

            borrarFilas();
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "No hay nada seleccionado");
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Campos vacios o incorrectos");
        } catch (ClassCastException e) {
            JOptionPane.showMessageDialog(null, "precio incorrecto");
        }
    }//GEN-LAST:event_jbModificarActionPerformed

    private void jTTratamientosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTTratamientosMouseClicked
        // TODO add your handling code here:
        jbModificar.setEnabled(true);
    }//GEN-LAST:event_jTTratamientosMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCerrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRBTratActivos;
    private javax.swing.JRadioButton jRBTratDesac;
    private javax.swing.JRadioButton jRBTratTodos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTTratamientos;
    private javax.swing.JButton jbActivarDesactivar;
    private javax.swing.JButton jbModificar;
    // End of variables declaration//GEN-END:variables

    private void cargarCabecera() {
        modelo.addColumn("Id");
        modelo.addColumn("Tipo");
        modelo.addColumn("Importe");
        modelo.addColumn("Estado");
        jTTratamientos.setModel(modelo);
    }

    private void borrarFilas() {
        int filas = modelo.getRowCount() - 1;
        for (; filas >= 0; filas--) {
            modelo.removeRow(filas);
        }
    }

    public void tableChanged(TableModelEvent e) {
        if (e.getType() == TableModelEvent.UPDATE) {
            int row = e.getFirstRow();
            int column = e.getColumn();
            Object data = jTTratamientos.getValueAt(row, column);
            System.out.println("Celda modificada en fila " + row + ", columna " + column + ": " + data);
        }
    }
    
}
